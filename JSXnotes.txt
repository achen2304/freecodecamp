stateless functional component --> func that accepts props
stateless component --> extends React.Component but no internal state
stateful component --> extends React.Component & has internal state

const JSX = (
    <HTML CODE>
    {/*<HTML COMMENT>*/}
)

ReactDOM.render(<componentToRender />, targetNode) 
    targetNode = document.getElementById('id')
    ReactDOM.render(<MyComponent />, document.getElementById('challenge-node'))
className="{name}" --> use instead of class="{name}"
<tag /> --> all tags need to close & can close internally

const DemoComponent = function() {
  return (
    <div className='customClass' />
  );
};

class Kitten extends React.Component {
  constructor(props) {
    super(props);
    this.state {
      json: thing
    }
    handleClick() { --> changes state based on a click me button
      this.setState({ new: state })
    }
    this.method = this.method.bind(this)
  }
  render() {
    {constants}
    return (
      <h1>{this.state.json}</h1> --> returns the json
    );
  }
}

return (
 <App>
  <Navbar />
  <Dashboard />
  <Footer />
 </App>
)

----props-----> a way to have params in html 
<App>
  <Welcome user='Mark' />
</App>
const Welcome = (props) => <h1>Hello, {props.user}!</h1>
{MyComponent}.defaultProps = { json: 'thing' } --> default prop creation

-----------lifecycle methods--------- 
componentWillMount() 
componentDidMount() 
shouldComponentUpdate() 
componentDidUpdate() 
componentWillUnmount()